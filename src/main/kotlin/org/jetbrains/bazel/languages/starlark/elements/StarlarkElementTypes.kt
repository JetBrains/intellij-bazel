@file:Suppress("WildcardImport", "LongMethod")

package org.jetbrains.bazel.languages.starlark.elements

import com.intellij.lang.ASTNode
import com.intellij.psi.PsiElement
import org.jetbrains.bazel.languages.starlark.psi.impl.*

object StarlarkElementTypes {
  val ASSIGNMENT_STATEMENT = StarlarkElementType("ASSIGNMENT_STATEMENT")
  val AUG_ASSIGNMENT_STATEMENT = StarlarkElementType("AUG_ASSIGNMENT_STATEMENT")
  val BREAK_STATEMENT = StarlarkElementType("BREAK_STATEMENT")
  val CONTINUE_STATEMENT = StarlarkElementType("CONTINUE_STATEMENT")
  val EXPRESSION_STATEMENT = StarlarkElementType("EXPRESSION_STATEMENT")
  val FOR_STATEMENT = StarlarkElementType("FOR_STATEMENT")
  val IF_STATEMENT = StarlarkElementType("IF_STATEMENT")
  val LOAD_STATEMENT = StarlarkElementType("LOAD_STATEMENT")
  val NAMED_LOAD_VALUE = StarlarkElementType("NAMED_LOAD_VALUE")
  val LOAD_VALUE_LIST = StarlarkElementType("LOAD_VALUE_LIST")
  val PASS_STATEMENT = StarlarkElementType("PASS_STATEMENT")
  val RETURN_STATEMENT = StarlarkElementType("RETURN_STATEMENT")
  val STATEMENT_LIST = StarlarkElementType("STATEMENT_LIST")

  val FUNCTION_DECLARATION = StarlarkElementType("FUNCTION_DECLARATION")
  val NAMED_PARAMETER = StarlarkElementType("NAMED_PARAMETER")
  val PARAMETER_LIST = StarlarkElementType("PARAMETER_LIST")
  val SINGLE_STAR_PARAMETER = StarlarkElementType("SINGLE_STAR_PARAMETER")
  val TUPLE_PARAMETER = StarlarkElementType("TUPLE_PARAMETER")

  val ARGUMENT_LIST = StarlarkElementType("ARGUMENT_LIST")
  val BINARY_EXPRESSION = StarlarkElementType("BINARY_EXPRESSION")
  val CALL_EXPRESSION = StarlarkElementType("CALL_EXPRESSION")
  val CONDITIONAL_EXPRESSION = StarlarkElementType("CONDITIONAL_EXPRESSION")
  val DICT_COMP_EXPRESSION = StarlarkElementType("DICT_COMP_EXPRESSION")
  val DICT_LITERAL_EXPRESSION = StarlarkElementType("DICT_LITERAL_EXPRESSION")
  val DOUBLE_STAR_EXPRESSION = StarlarkElementType("DOUBLE_STAR_EXPRESSION")
  val EMPTY_EXPRESSION = StarlarkElementType("EMPTY_EXPRESSION")
  val FLOAT_LITERAL_EXPRESSION = StarlarkElementType("FLOAT_LITERAL_EXPRESSION")
  val GENERATOR_EXPRESSION = StarlarkElementType("GENERATOR_EXPRESSION")
  val TARGET_EXPRESSION = StarlarkElementType("TARGET_EXPRESSION")
  val INTEGER_LITERAL_EXPRESSION = StarlarkElementType("INTEGER_LITERAL_EXPRESSION")
  val KEY_VALUE_EXPRESSION = StarlarkElementType("KEY_VALUE_EXPRESSION")
  val LAMBDA_EXPRESSION = StarlarkElementType("LAMBDA_EXPRESSION")
  val LIST_COMP_EXPRESSION = StarlarkElementType("LIST_COMP_EXPRESSION")
  val LIST_LITERAL_EXPRESSION = StarlarkElementType("LIST_LITERAL_EXPRESSION")
  val NAMED_ARGUMENT_EXPRESSION = StarlarkElementType("NAMED_ARGUMENT_EXPRESSION")
  val PARENTHESIZED_EXPRESSION = StarlarkElementType("PARENTHESIZED_EXPRESSION")
  val PREFIX_EXPRESSION = StarlarkElementType("PREFIX_EXPRESSION")
  val REFERENCE_EXPRESSION = StarlarkElementType("TARGET_EXPRESSION")
  val SLICE_EXPRESSION = StarlarkElementType("SLICE_EXPRESSION")
  val SLICE_ITEM = StarlarkElementType("SLICE_ITEM")
  val STAR_ARGUMENT_EXPRESSION = StarlarkElementType("STAR_ARGUMENT_EXPRESSION")
  val STAR_EXPRESSION = StarlarkElementType("STAR_EXPRESSION")
  val STRING_LITERAL_EXPRESSION = StarlarkElementType("STRING_LITERAL_EXPRESSION")
  val SUBSCRIPTION_EXPRESSION = StarlarkElementType("SUBSCRIPTION_EXPRESSION")
  val TUPLE_EXPRESSION = StarlarkElementType("TUPLE_EXPRESSION")

  fun createElement(node: ASTNode): PsiElement = when (val type = node.elementType) {
    ASSIGNMENT_STATEMENT -> StarlarkAssignmentStatementImpl(node)
    AUG_ASSIGNMENT_STATEMENT -> StarlarkAugAssignmentStatementImpl(node)
    BREAK_STATEMENT -> StarlarkBreakStatementImpl(node)
    CONTINUE_STATEMENT -> StarlarkContinueStatementImpl(node)
    EXPRESSION_STATEMENT -> StarlarkExpressionStatementImpl(node)
    FOR_STATEMENT -> StarlarkForStatementImpl(node)
    IF_STATEMENT -> StarlarkIfStatementImpl(node)
    LOAD_STATEMENT -> StarlarkLoadStatementImpl(node)
    NAMED_LOAD_VALUE -> StarlarkNamedLoadValueImpl(node)
    LOAD_VALUE_LIST -> StarlarkLoadValueListImpl(node)
    PASS_STATEMENT -> StarlarkAugAssignmentStatementImpl(node)
    RETURN_STATEMENT -> StarlarkReturnStatementImpl(node)
    STATEMENT_LIST -> StarlarkStatementListImpl(node)

    FUNCTION_DECLARATION -> StarlarkFunctionDeclarationImpl(node)
    NAMED_PARAMETER -> StarlarkNamedParameterImpl(node)
    PARAMETER_LIST -> StarlarkParameterListImpl(node)
    SINGLE_STAR_PARAMETER -> StarlarkSingleStarParameterImpl(node)
    TUPLE_PARAMETER -> StarlarkTupleParameterImpl(node)

    ARGUMENT_LIST -> StarlarkArgumentListImpl(node)
    BINARY_EXPRESSION -> StarlarkBinaryExpressionImpl(node)
    CALL_EXPRESSION -> StarlarkCallExpressionImpl(node)
    CONDITIONAL_EXPRESSION -> StarlarkConditionalExpressionImpl(node)
    DICT_COMP_EXPRESSION -> StarlarkDictCompExpressionImpl(node)
    DICT_LITERAL_EXPRESSION -> StarlarkDictLiteralExpressionImpl(node)
    DOUBLE_STAR_EXPRESSION -> StarlarkDoubleStarExpressionImpl(node)
    EMPTY_EXPRESSION -> StarlarkEmptyExpressionImpl(node)
    FLOAT_LITERAL_EXPRESSION -> StarlarkFloatLiteralExpressionImpl(node)
    GENERATOR_EXPRESSION -> StarlarkGeneratorExpressionImpl(node)
    INTEGER_LITERAL_EXPRESSION -> StarlarkIntegerLiteralExpressionImpl(node)
    KEY_VALUE_EXPRESSION -> StarlarkKeyValueExpressionImpl(node)
    LAMBDA_EXPRESSION -> StarlarkLambdaExpressionImpl(node)
    LIST_COMP_EXPRESSION -> StarlarkListCompExpressionImpl(node)
    LIST_LITERAL_EXPRESSION -> StarlarkListLiteralExpressionImpl(node)
    NAMED_ARGUMENT_EXPRESSION -> StarlarkNamedArgumentExpressionImpl(node)
    PARENTHESIZED_EXPRESSION -> StarlarkParenthesizedExpressionImpl(node)
    PREFIX_EXPRESSION -> StarlarkPrefixExpressionImpl(node)
    REFERENCE_EXPRESSION -> StarlarkReferenceExpressionImpl(node)
    SLICE_EXPRESSION -> StarlarkSliceExpressionImpl(node)
    SLICE_ITEM -> StarlarkSliceItemImpl(node)
    STAR_ARGUMENT_EXPRESSION -> StarlarkStarArgumentExpressionImpl(node)
    STAR_EXPRESSION -> StarlarkStarExpressionImpl(node)
    STRING_LITERAL_EXPRESSION -> StarlarkStringLiteralExpressionImpl(node)
    SUBSCRIPTION_EXPRESSION -> StarlarkSubscriptionExpressionImpl(node)
    TARGET_EXPRESSION -> StarlarkTargetExpressionImpl(node)
    TUPLE_EXPRESSION -> StarlarkTupleExpressionImpl(node)

    else -> error("Unknown element type: $type")
  }
}
